# options for analysis running
run:
  # default concurrency is a available CPU number
  concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 20m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  # which dirs to skip: issues from them won't be reported;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but default dirs are skipped independently
  # from this option's value (see skip-dirs-use-default).
  skip-dirs:
    - third_party
    - local

  # default is true. Enables skipping of directories:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: false

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  skip-files:

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  modules-download-mode: readonly

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true

# all available settings of specific linters
linters-settings:
  gci:
    sections:
      - standard
      - default
      - prefix(github.com/open-telemetry/opentelemetry-collector-contrib)

  govet:
    # report about shadowed variables
    check-shadowing: true

    # settings per analyzer
    settings:
      printf: # analyzer name, run `go tool vet help` to see all analyzers
        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

    enable-all: true
    # TODO: Enable this and fix the alignment issues.
    disable:
      - fieldalignment
      - loopclosure

  revive:
    # minimal confidence for issues, default is 0.8
    min-confidence: 0.8

  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true

  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
    local-prefixes: github.com/open-telemetry/opentelemetry-collector-contrib

  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US
    ignore-words:
      - cancelled
      - metre
      - meter
      - metres
      - kilometre
      - kilometres

  depguard:
    rules:
      denied-deps:
        deny:
          - pkg: go.uber.org/atomic
            desc: "Use 'sync/atomic' instead of go.uber.org/atomic"
          - pkg: github.com/pkg/errors
            desc: "Use 'errors' or 'fmt' instead of github.com/pkg/errors"
          - pkg: github.com/hashicorp/go-multierror
            desc: "Use go.uber.org/multierr instead of github.com/hashicorp/go-multierror"
        # Add a different guard rule so that we can ignore tests.
      ignore-in-test:
          deny:
          - pkg: go.opentelemetry.io/proto
            desc: "Use go.opentelemetry.io/collector/pdata instead"
            # Allow in tests for testing pdata or other receivers/exporters that expect OTLP.
          files:
            - "!**/*_test.go"

linters:
  enable:
    - depguard
    - errcheck
    - errorlint
    - exportloopref
    - exhaustive
    - gci
    - gocritic
    - gofmt
    - goimports
    - gosec
    - govet
    - misspell
    - revive
    - staticcheck
    - tenv
    - unconvert
    - unparam
    - unused

issues:
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - text: "G404:"
      linters:
        - gosec
    - text: "G402:"
      linters:
        - gosec
    # Following exclude-rules are used to exclude the existing components which do not pass exhaustive lint,
    # in order to enable the exhaustive lint check.
    # We should not add more exclude-rules.
    # The progress of solving existing exclude-rules will be tracked in https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/23266
    - path: awscontainerinsightreceiver
      linters:
        - exhaustive
    - path: azureeventhubreceiver
      linters:
        - exhaustive
    - path: filereceiver
      linters:
        - exhaustive
    - path: fluentforwardreceiver
      linters:
        - exhaustive
    - path: googlecloudpubsubreceiver
      linters:
        - exhaustive
    - path: googlecloudspannerreceiver
      linters:
        - exhaustive
    - path: k8sclusterreceiver
      linters:
        - exhaustive
    - path: kubeletstatsreceiver
      linters:
        - exhaustive
    - path: podmanreceiver
      linters:
        - exhaustive
    - path: prometheusreceiver
      linters:
        - exhaustive
    - path: receivercreator
      linters:
        - exhaustive
    - path: statsdreceiver
      linters:
        - exhaustive
    - path: attributesprocessor
      linters:
        - exhaustive
    - path: cumulativetodeltaprocessor
      linters:
        - exhaustive
    - path: deltatorateprocessor
      linters:
        - exhaustive
    - path: groupbyattrsprocessor
      linters:
        - exhaustive
    - path: filterprocessor
      linters:
        - exhaustive
    - path: metricsgenerationprocessor
      linters:
        - exhaustive
    - path: metricstransformprocessor
      linters:
        - exhaustive
    - path: probabilisticsamplerprocessor
      linters:
        - exhaustive
    - path: servicegraphprocessor
      linters:
        - exhaustive
    - path: spanprocessor
      linters:
        - exhaustive
    - path: resourcedetectionprocessor
      linters:
        - exhaustive
    - path: tailsamplingprocessor
      linters:
        - exhaustive
    - path: transformprocessor
      linters:
        - exhaustive
    - path: alibabacloudlogserviceexporter
      linters:
        - exhaustive
    - path: awsemfexporter
      linters:
        - exhaustive
    - path: awsxrayexporter
      linters:
        - exhaustive
    - path: azuremonitorexporter
      linters:
        - exhaustive
    - path: azuredataexplorerexporter
      linters:
        - exhaustive
    - path: carbonexporter
      linters:
        - exhaustive
    - path: coralogixexporter
      linters:
        - exhaustive
    - path: clickhouseexporter
      linters:
        - exhaustive
    - path: datasetexporter
      linters:
        - exhaustive
    - path: dynatraceexporter
      linters:
        - exhaustive
    - path: elasticsearchexporter
      linters:
        - exhaustive
    - path: datadogexporter
      linters:
        - exhaustive
    - path: googlecloudpubsubexporter
      linters:
        - exhaustive
    - path: instanaexporter
      linters:
        - exhaustive
    - path: jaegerthrifthttpexporter
      linters:
        - exhaustive
    - path: logzioexporter
      linters:
        - exhaustive
    - path: sentryexporter
      linters:
        - exhaustive
    - path: prometheusexporter
      linters:
        - exhaustive
    - path: prometheusremotewriteexporter
      linters:
        - exhaustive
    - path: sumologicexporter
      linters:
        - exhaustive
    - path: skywalkingexporter
      linters:
        - exhaustive
    - path: splunkhecexporter
      linters:
        - exhaustive
    - path: signalfxexporter
      linters:
        - exhaustive
    - path: tanzuobservabilityexporter
      linters:
        - exhaustive
    - path: k8sobserver
      linters:
        - exhaustive
    - path: containerinsight
      linters:
        - exhaustive
    - path: filter
      linters:
        - exhaustive
    - path: coreinternal
      linters:
        - exhaustive
    - path: k8sconfig
      linters:
        - exhaustive
    - path: pdatatest
      linters:
        - exhaustive
    - path: ottl
      linters:
        - exhaustive
    - path: resourcetotelemetry
      linters:
        - exhaustive
    - path: jaeger
      linters:
        - exhaustive
    - path: prometheus
      linters:
        - exhaustive
    - path: loki
      linters:
        - exhaustive
    - path: opencensus
      linters:
        - exhaustive
    - path: signalfx
      linters:
        - exhaustive
    - path: zipkin
      linters:
        - exhaustive
    - path: mdatagen
      linters:
        - exhaustive
    - path: configschema
      linters:
        - exhaustive
    - path: testbed
      linters:
        - exhaustive